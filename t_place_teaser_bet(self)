[1mdiff --git a/pinnacle/endpoints/betting.py b/pinnacle/endpoints/betting.py[m
[1mindex 1e30bb0..66d731d 100644[m
[1m--- a/pinnacle/endpoints/betting.py[m
[1m+++ b/pinnacle/endpoints/betting.py[m
[36m@@ -76,7 +76,7 @@[m [mclass Betting(BaseEndpoint):[m
         :param special_id: Special identification.[m
         :param contestant_id: Contestant identification.[m
         :param stake: Wagered amount in Clientâ€™s currency.[m
[31m-        :param win_risk_stake: Whether the stake amount is risk or win amount.[m
[32m+[m[32m        :param win_risk_stake: Whether the stake amount is risk or win amount.e[m
         :param odds_format: Bet is processed with this odds format.[m
         :param accept_better_line: Whether or not to accept a bet when there is a line change in favor of the client.[m
         :param session: requests session to be used.[m
[1mdiff --git a/pinnacle/tests/test_betting.py b/pinnacle/tests/test_betting.py[m
[1mindex 878d94d..22fe823 100644[m
[1m--- a/pinnacle/tests/test_betting.py[m
[1m+++ b/pinnacle/tests/test_betting.py[m
[36m@@ -4,6 +4,7 @@[m [mimport unittest.mock as mock[m
 [m
 from pinnacle.apiclient import APIClient[m
 from pinnacle.endpoints.betting import Betting[m
[32m+[m[32mfrom pinnacle.enums import WinRiskType, Boolean, OddsFormat[m
 [m
 [m
 class BettingTest(unittest.TestCase):[m
[36m@@ -17,5 +18,60 @@[m [mclass BettingTest(unittest.TestCase):[m
     def test_get_bets(self, mock_request, mock_process_response):[m
         self.betting.get_bets(betids=[1, 2, 3, 4])[m
 [m
[31m-        mock_request.assert_called_once_with("GET", method='v1/bets', params={'betIds': [1, 2, 3, 4]}, session=None)[m
[32m+[m[32m        mock_request.assert_called_once_with("GET", method='v1/bets', params={'betids': [1, 2, 3, 4]}, session=None)[m
         assert mock_process_response.call_count == 1[m
[32m+[m
[32m+[m[32m    @mock.patch('pinnacle.endpoints.betting.Betting.process_response')[m
[32m+[m[32m    @mock.patch('pinnacle.endpoints.betting.Betting.request', return_value=mock.Mock())[m
[32m+[m[32m    def test_place_bet(self, mock_request, mock_process_response):[m
[32m+[m[32m        self.betting.place_bet([m
[32m+[m[32m            sport_id=1, event_id=2, line_id=10001, period_number=1, bet_type='MONEYLINE', stake=10.5, team=None,[m
[32m+[m[32m            side=None, alt_line_id=None, win_risk_stake=WinRiskType.Risk.value, accept_better_line=Boolean.TRUE.value,[m
[32m+[m[32m            odds_format=OddsFormat.Decimal.value, is_max_stake_bet=None, pitcher1_must_start=None,[m
[32m+[m[32m            pitcher2_must_start=None, customer_reference=None, session=None[m
[32m+[m[32m        )[m
[32m+[m[32m        req_method, params = mock_request.call_args[m
[32m+[m
[32m+[m[32m        assert req_method[0] == "POST"[m
[32m+[m[32m        assert params['method'] == 'v1/bets/place'[m
[32m+[m[32m        assert params['data']['sportId'] == 1[m
[32m+[m[32m        assert params['data']['eventId'] == 2[m
[32m+[m[32m        assert params['data']['lineId'] == 10001[m
[32m+[m[32m        assert params['data']['periodNumber'] == 1[m
[32m+[m[32m        assert params['data']['betType'] == 'MONEYLINE'[m
[32m+[m[32m        assert params['data']['stake'] == 10.5[m
[32m+[m[32m        assert params['data']['winRiskStake'] == 'RISK'[m
[32m+[m[32m        assert params['data']['acceptBetterLine'] == 1[m
[32m+[m[32m        assert params['data']['oddsFormat'] == 'DECIMAL'[m
[32m+[m
[32m+[m[32m        assert mock_process_response.call_count == 1[m
[32m+[m
[32m+[m[32m    @mock.patch('pinnacle.endpoints.betting.Betting.process_response')[m
[32m+[m[32m    @mock.patch('pinnacle.endpoints.betting.Betting.request', return_value=mock.Mock())[m
[32m+[m[32m    def test_place_special_bet(self, mock_request, mock_process_response):[m
[32m+[m[32m        self.betting.place_special_bet([m
[32m+[m[32m            line_id=10001, special_id=20002, contestant_id=1, stake=12, win_risk_stake=WinRiskType.Win.value,[m
[32m+[m[32m            odds_format=OddsFormat.American.value, accept_better_line=Boolean.TRUE.value, session=None[m
[32m+[m[32m        )[m
[32m+[m[32m        req_method, params = mock_request.call_args[m
[32m+[m
[32m+[m[32m        assert req_method[0] == "POST"[m
[32m+[m[32m        assert params['method'] == 'v1/bets/special'[m
[32m+[m[32m        assert isinstance(params['data']['bets'], list)[m
[32m+[m[32m        assert params['data']['bets'][0]['specialId'] == 20002[m
[32m+[m[32m        assert params['data']['bets'][0]['lineId'] == 10001[m
[32m+[m[32m        assert params['data']['bets'][0]['contestantId'] == 1[m
[32m+[m[32m        assert params['data']['bets'][0]['stake'] == 12[m
[32m+[m[32m        assert params['data']['bets'][0]['winRiskStake'] == 'WIN'[m
[32m+[m[32m        assert params['data']['bets'][0]['acceptBetterLine'] == 1[m
[32m+[m[32m        assert params['data']['bets'][0]['oddsFormat'] == 'AMERICAN'[m
[32m+[m
[32m+[m[32m        assert mock_process_response.call_count == 1[m
[32m+[m
[32m+[m[32m    def test_place_teaser_bet(self):[m
[32m+[m[32m        with self.assertRaises(NotImplementedError):[m
[32m+[m[32m            self.betting.place_teaser_bet()[m
[32m+[m
[32m+[m[32m    def test_place_parlay_bet(self):[m
[32m+[m[32m        with self.assertRaises(NotImplementedError):[m
[32m+[m[32m            self.betting.place_parlay_bet()[m
